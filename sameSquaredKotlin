/*Write a function called same (I will be writing a function called sameSquared), which accepts two arrays.
The function should return true if every value in the array has it's corresponding value squared in the 
second array. The frequency of the values must be the same.*/ 

fun sameSquared(array1: IntArray, array2: IntArray): Boolean {
    if (array1.size != array2.size) {
        return false
    }

    val frequencyMap1 = mutableMapOf<Int, Int>()
    val frequencyMap2 = mutableMapOf<Int, Int>()

//basically, this part accesses num, if it's not there it defaults it to 0 or adds 1. 
    for (num in array1) {
        frequencyMap1[num] = frequencyMap1.getOrDefault(num, 0) + 1
    }

    for (num in array2) {
        frequencyMap2[num] = frequencyMap2.getOrDefault(num, 0) + 1
    }

//here we get the sqauredkey value in map2, we check if the corresponding squared value is there OR if the frequency
//of that value is present. 

    for ((key, value) in frequencyMap1) {
        val squaredKey = key * key
        if (!frequencyMap2.containsKey(squaredKey) || frequencyMap2[squaredKey] != value) {
            return false
        }
    }

    return true
}

fun main() {
    val result = sameSquared(intArrayOf(1, 2, 3), intArrayOf(1, 4, 4))
    println(result)
}



//This code has a time complexity of O(n), where n is the length of the input arrays, because it iterates through both arrays only once to build the frequency maps and then compares the frequency maps. 

